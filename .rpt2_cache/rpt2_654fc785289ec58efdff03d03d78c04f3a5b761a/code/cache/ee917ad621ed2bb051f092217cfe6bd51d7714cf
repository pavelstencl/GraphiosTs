{"code":"import Axios from 'axios';\r\nimport { isFragment } from './utils/isFragment';\r\n/**\r\n * GraphiosTs instance holding connection with one server entrypoint.\r\n * ____\r\n * GraphiosTs is dynamic GraphQl client build on top of Axios instance. All axios request settings are implemented in GraphiosTs settings.\r\n * For more information visit [GitHub](https://github.com/pavelstencl/GraphiosTs)\r\n */\r\nvar GraphiosTs = /** @class */ (function () {\r\n    /**\r\n     * @param axios Instance of Axios. For more information visit [GitHub](https://github.com/axios/axios)\r\n     * @param settings GraphiosTs settings\r\n     */\r\n    function GraphiosTs(axios, settings) {\r\n        this.axios = axios;\r\n        this.settings = settings;\r\n        this.axios = Axios.create();\r\n        this.settings = settings;\r\n    }\r\n    /**\r\n     * Creates new request object.\r\n     * @param operation name of GraphQl operation type\r\n     * @param name name of GraphTs Schema\r\n     */\r\n    GraphiosTs.prototype.create = function (operation, name) {\r\n        return new GraphiosTsRequest(name, operation, this.request.bind(this));\r\n    };\r\n    GraphiosTs.prototype.request = function (pld) {\r\n        return new Promise(function (resolve, reject) {\r\n            resolve('asd');\r\n        });\r\n    };\r\n    return GraphiosTs;\r\n}());\r\nexport { GraphiosTs };\r\nvar GraphiosTsRequest = /** @class */ (function () {\r\n    function GraphiosTsRequest(name, operation, graphiosTsCallback) {\r\n        this.name = name;\r\n        this.operation = operation;\r\n        this.graphiosTsCallback = graphiosTsCallback;\r\n        this.name = name;\r\n        this.operation = operation;\r\n        this._filters = {};\r\n        this._payload = [{}];\r\n        this.graphiosTsCallback = graphiosTsCallback;\r\n    }\r\n    //GraphTsInputValidation<T,GraphTsRequest<S>> &  \r\n    GraphiosTsRequest.prototype.request = function (payload) {\r\n        return new Promise(function (resolve, reject) {\r\n            resolve(payload);\r\n        });\r\n    };\r\n    GraphiosTsRequest.prototype.graphQlQuery = function () {\r\n    };\r\n    return GraphiosTsRequest;\r\n}());\r\nexport { GraphiosTsRequest };\r\nexport { isFragment };\r\n","references":["C:/NODE/bestatecore/GraphiosTs/src/types/graphTsSchema.ts","C:/NODE/bestatecore/GraphiosTs/src/types/index.ts","C:/NODE/bestatecore/GraphiosTs/node_modules/axios/index.d.ts","C:/NODE/bestatecore/GraphiosTs/src/utils/isFragment.ts"],"dts":{"name":"C:/NODE/bestatecore/GraphiosTs/src/index.d.ts","writeByteOrderMark":false,"text":"import { GraphTsSchema, GraphTsResponse, GraphTsOperationsList, GraphTsInputValidation, GraphTsRequest } from \"./types/graphTsSchema\";\r\nimport { GraphiosTsSettings } from './types';\r\nimport { AxiosInstance } from 'axios';\r\nimport { isFragment } from './utils/isFragment';\r\n/**\r\n * GraphiosTs instance holding connection with one server entrypoint.\r\n * ____\r\n * GraphiosTs is dynamic GraphQl client build on top of Axios instance. All axios request settings are implemented in GraphiosTs settings.\r\n * For more information visit [GitHub](https://github.com/pavelstencl/GraphiosTs)\r\n */\r\nexport declare class GraphiosTs<T extends GraphTsOperationsList> {\r\n    private axios;\r\n    private settings?;\r\n    /**\r\n     * @param axios Instance of Axios. For more information visit [GitHub](https://github.com/axios/axios)\r\n     * @param settings GraphiosTs settings\r\n     */\r\n    constructor(axios: AxiosInstance, settings?: GraphiosTsSettings | undefined);\r\n    /**\r\n     * Creates new request object.\r\n     * @param operation name of GraphQl operation type\r\n     * @param name name of GraphTs Schema\r\n     */\r\n    create<U extends keyof T, K extends keyof T[U]>(operation: U, name: K): GraphiosTsRequest<T[U][K]>;\r\n    private request;\r\n}\r\nexport declare class GraphiosTsRequest<S extends GraphTsSchema> {\r\n    private name;\r\n    private operation;\r\n    private graphiosTsCallback;\r\n    private _payload;\r\n    private _filters;\r\n    constructor(name: string, operation: keyof GraphTsOperationsList, graphiosTsCallback: (pld: GraphiosTsRequest<any>) => Promise<any>);\r\n    request<T>(payload: GraphTsInputValidation<T, GraphTsRequest<S>, false> & GraphTsRequest<S>): Promise<GraphTsResponse<T, S>>;\r\n    graphQlQuery(): void;\r\n}\r\nexport { isFragment };\r\n"}}
